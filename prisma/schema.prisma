// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  username String    @unique
  email    String    @unique
  password String    
  firstName String
  lastName String
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  posts Post[]

  like Like[]

  comment Comment[]
}

model Post {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  content  String
  rating  Int
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  user User @relation(fields: [userID], references: [id])
  userID String @db.ObjectId
  movie Movie @relation(fields: [movieID], references: [id])
  movieID String @db.ObjectId
  likes Like[]
  comments Comment[]
}

model Movie {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  movieName String
  movieImage String
  overview  String
  genreIDs Int[]
  imdbID   String @unique
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  posts Post[]
}

model Comment {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  comment  String
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  post Post @relation(fields: [postID], references: [id])
  postID String @db.ObjectId

  user   User  @relation(fields: [userID], references: [id])
  userID String @db.ObjectId
}

model Like {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt

  post Post @relation(fields: [postID], references: [id])
  postID String @db.ObjectId

  user User @relation(fields: [userID], references: [id])
  userID String @db.ObjectId

  @@unique([postID, userID])
}